{
  "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintERC2309QuantityExceedsLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnershipNotInitializedForExtraData",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ConsecutiveTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "amountNFTsPerWallet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_saleStartTime",
          "type": "uint256"
        }
      ],
      "name": "setSaleStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "walletOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
  "receipt": {
    "to": null,
    "from": "0x479e01Ee7029Fd1399a56024a86B951ECF10709B",
    "contractAddress": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
    "transactionIndex": 30,
    "gasUsed": "2919186",
    "logsBloom": "0x2600008010000000004000440080800000008200001000000081000002000002000200004000420000000000040000000000b000060481a000200016002400000410300000000088808000080000408018430000000400110009000010020000090000000208400000000001000008002000410040000600800000100440004000800204000008000100000000080412180019000006000000020040000000002004000001020000200001020100000000000008028080600022100804014040401010020000001004010000000020000820208080000008201001084000603aa000400200000000080000100020000008000000008004040108008002980000",
    "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741",
    "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
    "logs": [
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b"
        ],
        "data": "0x",
        "logIndex": 122,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 123,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 124,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000002"
        ],
        "data": "0x",
        "logIndex": 125,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000003"
        ],
        "data": "0x",
        "logIndex": 126,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000004"
        ],
        "data": "0x",
        "logIndex": 127,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000005"
        ],
        "data": "0x",
        "logIndex": 128,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000006"
        ],
        "data": "0x",
        "logIndex": 129,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000007"
        ],
        "data": "0x",
        "logIndex": 130,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000008"
        ],
        "data": "0x",
        "logIndex": 131,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000009"
        ],
        "data": "0x",
        "logIndex": 132,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x000000000000000000000000000000000000000000000000000000000000000a"
        ],
        "data": "0x",
        "logIndex": 133,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x000000000000000000000000000000000000000000000000000000000000000b"
        ],
        "data": "0x",
        "logIndex": 134,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x000000000000000000000000000000000000000000000000000000000000000c"
        ],
        "data": "0x",
        "logIndex": 135,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x000000000000000000000000000000000000000000000000000000000000000d"
        ],
        "data": "0x",
        "logIndex": 136,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x000000000000000000000000000000000000000000000000000000000000000e"
        ],
        "data": "0x",
        "logIndex": 137,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x000000000000000000000000000000000000000000000000000000000000000f"
        ],
        "data": "0x",
        "logIndex": 138,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000010"
        ],
        "data": "0x",
        "logIndex": 139,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000011"
        ],
        "data": "0x",
        "logIndex": 140,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000012"
        ],
        "data": "0x",
        "logIndex": 141,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000013"
        ],
        "data": "0x",
        "logIndex": 142,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000014"
        ],
        "data": "0x",
        "logIndex": 143,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000015"
        ],
        "data": "0x",
        "logIndex": 144,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000016"
        ],
        "data": "0x",
        "logIndex": 145,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000017"
        ],
        "data": "0x",
        "logIndex": 146,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000018"
        ],
        "data": "0x",
        "logIndex": 147,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000019"
        ],
        "data": "0x",
        "logIndex": 148,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x000000000000000000000000000000000000000000000000000000000000001a"
        ],
        "data": "0x",
        "logIndex": 149,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x000000000000000000000000000000000000000000000000000000000000001b"
        ],
        "data": "0x",
        "logIndex": 150,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x000000000000000000000000000000000000000000000000000000000000001c"
        ],
        "data": "0x",
        "logIndex": 151,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x000000000000000000000000000000000000000000000000000000000000001d"
        ],
        "data": "0x",
        "logIndex": 152,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x000000000000000000000000000000000000000000000000000000000000001e"
        ],
        "data": "0x",
        "logIndex": 153,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x000000000000000000000000000000000000000000000000000000000000001f"
        ],
        "data": "0x",
        "logIndex": 154,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000020"
        ],
        "data": "0x",
        "logIndex": 155,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000021"
        ],
        "data": "0x",
        "logIndex": 156,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000022"
        ],
        "data": "0x",
        "logIndex": 157,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000023"
        ],
        "data": "0x",
        "logIndex": 158,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000024"
        ],
        "data": "0x",
        "logIndex": 159,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000025"
        ],
        "data": "0x",
        "logIndex": 160,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000026"
        ],
        "data": "0x",
        "logIndex": 161,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000027"
        ],
        "data": "0x",
        "logIndex": 162,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000028"
        ],
        "data": "0x",
        "logIndex": 163,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000029"
        ],
        "data": "0x",
        "logIndex": 164,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x000000000000000000000000000000000000000000000000000000000000002a"
        ],
        "data": "0x",
        "logIndex": 165,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x000000000000000000000000000000000000000000000000000000000000002b"
        ],
        "data": "0x",
        "logIndex": 166,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x000000000000000000000000000000000000000000000000000000000000002c"
        ],
        "data": "0x",
        "logIndex": 167,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x000000000000000000000000000000000000000000000000000000000000002d"
        ],
        "data": "0x",
        "logIndex": 168,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x000000000000000000000000000000000000000000000000000000000000002e"
        ],
        "data": "0x",
        "logIndex": 169,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x000000000000000000000000000000000000000000000000000000000000002f"
        ],
        "data": "0x",
        "logIndex": 170,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000030"
        ],
        "data": "0x",
        "logIndex": 171,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0xA235e5B852a6CF88c9f5abDAAf7dc2948D49652A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x0000000000000000000000000000000000000000000000000000000000000031"
        ],
        "data": "0x",
        "logIndex": 172,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 60564875,
        "transactionHash": "0xa7e5cea81d55963d87fb33c191eb0abe4c9477164404363ca1d876320f8c72b5",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000479e01ee7029fd1399a56024a86b951ecf10709b",
          "0x000000000000000000000000dfe6ad10265afc05831b332fda6f5bc1ad9d79ce"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001563e7a7de38a7c000000000000000000000000000000000000000000000000785724bc9b1d00000000000000000000000000000000000000000000000002100169e2e517146cdd0000000000000000000000000000000000000000000000007700e6421d39758400000000000000000000000000000000000000000000021002c0215f94f7f759",
        "logIndex": 173,
        "blockHash": "0x02ff9dc9725a15f90cd3fc7dcd12adadb7eb35d7d9ff1e20478d25b642306741"
      }
    ],
    "blockNumber": 60564875,
    "cumulativeGasUsed": "6511784",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "8452e1c8e22c3f8f4efc3f79ced56b8d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountNFTsPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleStartTime\",\"type\":\"uint256\"}],\"name\":\"setSaleStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"ConsecutiveTransfer(uint256,uint256,address,address)\":{\"details\":\"Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in `owner`'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}.\"},\"mint(uint256)\":{\"params\":{\"_quantity\":\"Amount of NFTs the user wants to mint*\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"setBaseUri(string)\":{\"params\":{\"_baseURI\":\"The new base URI of the NFTs*\"}},\"setSaleStartTime(uint256)\":{\"params\":{\"_saleStartTime\":\"The new saleStartTime*\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"params\":{\"_tokenId\":\"The ID of the NFT you want to have the URI*\"}},\"totalSupply()\":{\"details\":\"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"walletOfOwner(address)\":{\"params\":{\"_owner\":\"The address to query\"},\"returns\":{\"_0\":\"An array with the token IDs owned by the address*\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{\"mint(uint256)\":{\"notice\":\"Mint function\"},\"setBaseUri(string)\":{\"notice\":\"Change the base URI of the NFTs\"},\"setSaleStartTime(uint256)\":{\"notice\":\"Change the saleStartTime\"},\"tokenURI(uint256)\":{\"notice\":\"Get the token URI of an NFT by its ID\"},\"walletOfOwner(address)\":{\"notice\":\"Get all token IDs owned by a specific address\"},\"withdraw()\":{\"notice\":\"Get paid :D !*\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTIsERC721A.sol\":\"NFT\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/NFTIsERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.26;\\n\\n/// @author Sergei Pushkin\\n\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract NFT is ERC721A, Ownable {\\n\\n    using Strings for uint;\\n\\n    // The total number of NFTs\\n    uint private constant MAX_SUPPLY = 499;\\n\\n    // The price of one NFT\\n    uint private constant PRICE = 50 ether;\\n\\n    // When the presale (dutch auction) starts\\n    uint public saleStartTime = 1721280804;\\n\\n    // base URI of the NFTs\\n    string public baseURI;\\n\\n    // Amount NFTs/Wallet\\n    uint private constant MAX_NFTS_PER_ADDRESS = 3;\\n    mapping(address => uint) public amountNFTsPerWallet;\\n\\n    constructor() ERC721A(\\\"Nom\\\", \\\"symbole\\\") {\\n        // Mint 50 NFTs directly to the contract owner's wallet\\n        _safeMint(msg.sender, 50);\\n        amountNFTsPerWallet[msg.sender] = 50;\\n    }\\n\\n    /**\\n    * @notice Mint function\\n    *\\n    * @param _quantity Amount of NFTs the user wants to mint\\n    **/\\n    function mint(uint _quantity) external payable {\\n        require(currentTime() >= saleStartTime, \\\"Sale has not started yet\\\");\\n        require(totalSupply() + _quantity <= MAX_SUPPLY, \\\"Max supply exceeded\\\");\\n        require(msg.value >= PRICE * _quantity, \\\"Not enough funds\\\");\\n        require(amountNFTsPerWallet[msg.sender] + _quantity <= MAX_NFTS_PER_ADDRESS, \\\"Only 3 NFTs per Wallet\\\");\\n        amountNFTsPerWallet[msg.sender] += _quantity;\\n        _safeMint(msg.sender, _quantity);\\n    }\\n\\n    /**\\n    * @notice Get the current timestamp\\n    *\\n    * @return the current timestamp\\n    **/\\n    function currentTime() internal view returns(uint) {\\n        return block.timestamp;\\n    }\\n\\n    /**\\n    * @notice Get the token URI of an NFT by its ID\\n    *\\n    * @param _tokenId The ID of the NFT you want to have the URI\\n    **/\\n    function tokenURI(uint _tokenId) public view virtual override returns (string memory) {\\n        require(_exists(_tokenId), \\\"URI query for nonexistent token\\\");\\n\\n        return string(abi.encodePacked(baseURI, _tokenId.toString(), \\\".json\\\"));\\n    }\\n\\n    /**\\n    * @notice Change the base URI of the NFTs\\n    *\\n    * @param _baseURI The new base URI of the NFTs\\n    **/\\n    function setBaseUri(string memory _baseURI) external onlyOwner {\\n        baseURI = _baseURI;\\n    }\\n\\n    /**\\n    * @notice Change the saleStartTime\\n    *\\n    * @param _saleStartTime The new saleStartTime\\n    **/\\n    function setSaleStartTime(uint _saleStartTime) external onlyOwner {\\n        saleStartTime = _saleStartTime;\\n    }\\n\\n    /**\\n    * @notice Get paid :D !\\n    **/\\n    function withdraw() public payable onlyOwner {\\n        (bool os, ) = payable(owner()).call{value: address(this).balance}(\\\"\\\");\\n        require(os);\\n    }\\n\\n    /**\\n    * @notice Get all token IDs owned by a specific address\\n    *\\n    * @param _owner The address to query\\n    * @return An array with the token IDs owned by the address\\n    **/\\n    function walletOfOwner(address _owner) external view returns (uint[] memory) {\\n        uint ownerTokenCount = balanceOf(_owner);\\n        uint[] memory ownedTokenIds = new uint[](ownerTokenCount);\\n        uint currentIndex = 0;\\n\\n        for (uint i = 0; i < totalSupply(); i++) {\\n            if (ownerOf(i) == _owner) {\\n                ownedTokenIds[currentIndex] = i;\\n                currentIndex++;\\n            }\\n        }\\n        return ownedTokenIds;\\n    }\\n}\\n\",\"keccak256\":\"0x36cedc43d7796a41699255930ed361ee855adfec2aa20687b01b51f017389f4c\",\"license\":\"MIT\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant _BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The `Transfer` event signature is given by:\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    // =============================================================\\n    //                            STORAGE\\n    // =============================================================\\n\\n    // The next token ID to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See {_packedOwnershipOf} implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    // - [232..255] `extraData`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // =============================================================\\n    //                          CONSTRUCTOR\\n    // =============================================================\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    // =============================================================\\n    //                   TOKEN COUNTING OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\n        // and it is initialized to `_startTokenId()`.\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view virtual returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    // =============================================================\\n    //                    ADDRESS DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal virtual {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    // =============================================================\\n    //                     OWNERSHIPS OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & _BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an initialized ownership slot\\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n                        // before an unintialized ownership slot\\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n                        // Hence, `curr` will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed will be zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) public payable virtual override {\\n        address owner = ownerOf(tokenId);\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId].value = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId].value;\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted. See {_mint}.\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n     */\\n    function _isSenderApprovedOrOwner(\\n        address approvedAddress,\\n        address owner,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\n            // `msgSender == owner || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\n        assembly {\\n            approvedAddressSlot := tokenApproval.slot\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      TRANSFER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public payable virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\n     * are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\n     * have been transferred. This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `tokenId` - Token ID to be transferred.\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    // =============================================================\\n    //                        MINT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 toMasked;\\n            uint256 end = startTokenId + quantity;\\n\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\\n            // The assembly, together with the surrounding Solidity code, have been\\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\\n            assembly {\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n                toMasked := and(to, _BITMASK_ADDRESS)\\n                // Emit the `Transfer` event.\\n                log4(\\n                    0, // Start of data (0, since no data).\\n                    0, // End of data (0, since no data).\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                    0, // `address(0)`.\\n                    toMasked, // `to`.\\n                    startTokenId // `tokenId`.\\n                )\\n\\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\\n                // that overflows uint256 will make the loop run out of gas.\\n                // The compiler will optimize the `iszero` away for performance.\\n                for {\\n                    let tokenId := add(startTokenId, 1)\\n                } iszero(eq(tokenId, end)) {\\n                    tokenId := add(tokenId, 1)\\n                } {\\n                    // Emit the `Transfer` event. Similar to above.\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\n                }\\n            }\\n            if (toMasked == 0) revert MintToZeroAddress();\\n\\n            _currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            _currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = _currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (_currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    // =============================================================\\n    //                        BURN OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     EXTRA DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n        uint256 packed = _packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\n        _packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n    }\\n\\n    // =============================================================\\n    //                       OTHER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\n            let m := add(mload(0x40), 0xa0)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23116c16976b7d8c0c714ba1b38ae6b16c16fc90ec69b568fb1ebf1bc063e01c\",\"license\":\"MIT\"},\"erc721a/contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0xa31dfe2635a25f899e279befef27ffcc02fd16e636c58d4c251a303f2355f7ad\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052636698a924600955348015610017575f80fd5b506040518060400160405280600381526020017f4e6f6d00000000000000000000000000000000000000000000000000000000008152506040518060400160405280600781526020017f73796d626f6c650000000000000000000000000000000000000000000000000081525081600290816100939190610895565b5080600390816100a39190610895565b506100b261012e60201b60201c565b5f8190555050506100d56100ca61013260201b60201c565b61013960201b60201c565b6100e63360326101fc60201b60201c565b6032600b5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550610af0565b5f90565b5f33905090565b5f60085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160085f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61021b828260405180602001604052805f81525061021f60201b60201c565b5050565b61022f83836102c260201b60201c565b5f8373ffffffffffffffffffffffffffffffffffffffff163b146102bd575f805490505f83820390505b6102715f86838060010194508661048960201b60201c565b6102a7576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81811061025957815f54146102ba575f80fd5b50505b505050565b5f805490505f8203610300576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103125f8483856105da60201b60201c565b600160406001901b17820260055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055506103968361037b5f865f6105e060201b60201c565b61038a8561060d60201b60201c565b1761061c60201b60201c565b60045f8381526020019081526020015f20819055505f80838301905073ffffffffffffffffffffffffffffffffffffffff8516915082825f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef5f80a4600183015b8181146104305780835f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef5f80a46001810190506103f7565b505f820361046a576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805f8190555050506104845f84838561064660201b60201c565b505050565b5f8373ffffffffffffffffffffffffffffffffffffffff1663150b7a026104b461064c60201b60201c565b8786866040518563ffffffff1660e01b81526004016104d69493929190610a22565b6020604051808303815f875af192505050801561051157506040513d601f19601f8201168201806040525081019061050e9190610ac5565b60015b610587573d805f811461053f576040519150601f19603f3d011682016040523d82523d5f602084013e610544565b606091505b505f81510361057f576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050949350505050565b50505050565b5f8060e883901c905060e86105fc86868461065360201b60201c565b62ffffff16901b9150509392505050565b5f6001821460e11b9050919050565b5f73ffffffffffffffffffffffffffffffffffffffff83169250814260a01b178317905092915050565b50505050565b5f33905090565b5f9392505050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806106d657607f821691505b6020821081036106e9576106e8610692565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261074b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610710565b6107558683610710565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f61079961079461078f8461076d565b610776565b61076d565b9050919050565b5f819050919050565b6107b28361077f565b6107c66107be826107a0565b84845461071c565b825550505050565b5f90565b6107da6107ce565b6107e58184846107a9565b505050565b5b81811015610808576107fd5f826107d2565b6001810190506107eb565b5050565b601f82111561084d5761081e816106ef565b61082784610701565b81016020851015610836578190505b61084a61084285610701565b8301826107ea565b50505b505050565b5f82821c905092915050565b5f61086d5f1984600802610852565b1980831691505092915050565b5f610885838361085e565b9150826002028217905092915050565b61089e8261065b565b67ffffffffffffffff8111156108b7576108b6610665565b5b6108c182546106bf565b6108cc82828561080c565b5f60209050601f8311600181146108fd575f84156108eb578287015190505b6108f5858261087a565b86555061095c565b601f19841661090b866106ef565b5f5b828110156109325784890151825560018201915060208501945060208101905061090d565b8683101561094f578489015161094b601f89168261085e565b8355505b6001600288020188555050505b505050505050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61098d82610964565b9050919050565b61099d81610983565b82525050565b6109ac8161076d565b82525050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6109f4826109b2565b6109fe81856109bc565b9350610a0e8185602086016109cc565b610a17816109da565b840191505092915050565b5f608082019050610a355f830187610994565b610a426020830186610994565b610a4f60408301856109a3565b8181036060830152610a6181846109ea565b905095945050505050565b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610aa481610a70565b8114610aae575f80fd5b50565b5f81519050610abf81610a9b565b92915050565b5f60208284031215610ada57610ad9610a6c565b5b5f610ae784828501610ab1565b91505092915050565b612e3280610afd5f395ff3fe608060405260043610610165575f3560e01c80636c0360eb116100d0578063a0bcfc7f11610089578063c87b56dd11610063578063c87b56dd146104b5578063df3a4586146104f1578063e985e9c51461052d578063f2fde38b1461056957610165565b8063a0bcfc7f14610449578063a22cb46514610471578063b88d4fde1461049957610165565b80636c0360eb1461035d57806370a0823114610387578063715018a6146103c35780638da5cb5b146103d957806395d89b4114610403578063a0712d681461042d57610165565b806323b872dd1161012257806323b872dd1461027b5780633ccfd60b1461029757806342842e0e146102a1578063438b6300146102bd578063525f8a5c146102f95780636352211e1461032157610165565b806301ffc9a71461016957806306fdde03146101a5578063081812fc146101cf578063095ea7b31461020b57806318160ddd146102275780631cbaee2d14610251575b5f80fd5b348015610174575f80fd5b5061018f600480360381019061018a9190611de8565b610591565b60405161019c9190611e2d565b60405180910390f35b3480156101b0575f80fd5b506101b9610622565b6040516101c69190611eb6565b60405180910390f35b3480156101da575f80fd5b506101f560048036038101906101f09190611f09565b6106b2565b6040516102029190611f73565b60405180910390f35b61022560048036038101906102209190611fb6565b61072c565b005b348015610232575f80fd5b5061023b61086b565b6040516102489190612003565b60405180910390f35b34801561025c575f80fd5b50610265610880565b6040516102729190612003565b60405180910390f35b6102956004803603810190610290919061201c565b610886565b005b61029f610b94565b005b6102bb60048036038101906102b6919061201c565b610c17565b005b3480156102c8575f80fd5b506102e360048036038101906102de919061206c565b610c36565b6040516102f0919061214e565b60405180910390f35b348015610304575f80fd5b5061031f600480360381019061031a9190611f09565b610d25565b005b34801561032c575f80fd5b5061034760048036038101906103429190611f09565b610d37565b6040516103549190611f73565b60405180910390f35b348015610368575f80fd5b50610371610d48565b60405161037e9190611eb6565b60405180910390f35b348015610392575f80fd5b506103ad60048036038101906103a8919061206c565b610dd4565b6040516103ba9190612003565b60405180910390f35b3480156103ce575f80fd5b506103d7610e89565b005b3480156103e4575f80fd5b506103ed610e9c565b6040516103fa9190611f73565b60405180910390f35b34801561040e575f80fd5b50610417610ec4565b6040516104249190611eb6565b60405180910390f35b61044760048036038101906104429190611f09565b610f54565b005b348015610454575f80fd5b5061046f600480360381019061046a919061229a565b61113a565b005b34801561047c575f80fd5b506104976004803603810190610492919061230b565b611155565b005b6104b360048036038101906104ae91906123e7565b61125b565b005b3480156104c0575f80fd5b506104db60048036038101906104d69190611f09565b6112cd565b6040516104e89190611eb6565b60405180910390f35b3480156104fc575f80fd5b506105176004803603810190610512919061206c565b611349565b6040516105249190612003565b60405180910390f35b348015610538575f80fd5b50610553600480360381019061054e9190612467565b61135e565b6040516105609190611e2d565b60405180910390f35b348015610574575f80fd5b5061058f600480360381019061058a919061206c565b6113ec565b005b5f6301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105eb57506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061061b5750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b606060028054610631906124d2565b80601f016020809104026020016040519081016040528092919081815260200182805461065d906124d2565b80156106a85780601f1061067f576101008083540402835291602001916106a8565b820191905f5260205f20905b81548152906001019060200180831161068b57829003601f168201915b5050505050905090565b5f6106bc8261146e565b6106f2576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60065f8381526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f61073682610d37565b90508073ffffffffffffffffffffffffffffffffffffffff166107576114c8565b73ffffffffffffffffffffffffffffffffffffffff16146107ba576107838161077e6114c8565b61135e565b6107b9576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b8260065f8481526020019081526020015f205f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b5f6108746114cf565b6001545f540303905090565b60095481565b5f610890826114d3565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108f7576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8061090284611596565b9150915061091881876109136114c8565b6115b9565b6109645761092d866109286114c8565b61135e565b610963576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b5f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036109c9576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109d686868660016115fc565b80156109e0575f82555b60055f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8154600190039190508190555060055f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f815460010191905081905550610aa885610a84888887611602565b7c020000000000000000000000000000000000000000000000000000000017611629565b60045f8681526020019081526020015f20819055505f7c0200000000000000000000000000000000000000000000000000000000841603610b24575f6001850190505f60045f8381526020019081526020015f205403610b22575f548114610b21578360045f8381526020019081526020015f20819055505b5b505b838573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610b8c8686866001611653565b505050505050565b610b9c611659565b5f610ba5610e9c565b73ffffffffffffffffffffffffffffffffffffffff1647604051610bc89061252f565b5f6040518083038185875af1925050503d805f8114610c02576040519150601f19603f3d011682016040523d82523d5f602084013e610c07565b606091505b5050905080610c14575f80fd5b50565b610c3183838360405180602001604052805f81525061125b565b505050565b60605f610c4283610dd4565b90505f8167ffffffffffffffff811115610c5f57610c5e612176565b5b604051908082528060200260200182016040528015610c8d5781602001602082028036833780820191505090505b5090505f805b610c9b61086b565b811015610d19578573ffffffffffffffffffffffffffffffffffffffff16610cc282610d37565b73ffffffffffffffffffffffffffffffffffffffff1603610d0c5780838381518110610cf157610cf0612543565b5b6020026020010181815250508180610d089061259d565b9250505b8080600101915050610c93565b50819350505050919050565b610d2d611659565b8060098190555050565b5f610d41826114d3565b9050919050565b600a8054610d55906124d2565b80601f0160208091040260200160405190810160405280929190818152602001828054610d81906124d2565b8015610dcc5780601f10610da357610100808354040283529160200191610dcc565b820191905f5260205f20905b815481529060010190602001808311610daf57829003601f168201915b505050505081565b5f8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e3a576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff60055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054169050919050565b610e91611659565b610e9a5f6116d7565b565b5f60085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060038054610ed3906124d2565b80601f0160208091040260200160405190810160405280929190818152602001828054610eff906124d2565b8015610f4a5780601f10610f2157610100808354040283529160200191610f4a565b820191905f5260205f20905b815481529060010190602001808311610f2d57829003601f168201915b5050505050905090565b600954610f5f61179a565b1015610fa0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f979061262e565b60405180910390fd5b6101f381610fac61086b565b610fb6919061264c565b1115610ff7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fee906126c9565b60405180910390fd5b806802b5e3af16b188000061100c91906126e7565b34101561104e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104590612772565b60405180910390fd5b600381600b5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054611099919061264c565b11156110da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d1906127da565b60405180910390fd5b80600b5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254611126919061264c565b9250508190555061113733826117a1565b50565b611142611659565b80600a90816111519190612995565b5050565b8060075f6111616114c8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff1661120a6114c8565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161124f9190611e2d565b60405180910390a35050565b611266848484610886565b5f8373ffffffffffffffffffffffffffffffffffffffff163b146112c757611290848484846117be565b6112c6576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b50505050565b60606112d88261146e565b611317576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130e90612aae565b60405180910390fd5b600a61132283611909565b604051602001611333929190612bd0565b6040516020818303038152906040529050919050565b600b602052805f5260405f205f915090505481565b5f60075f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b6113f4611659565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611462576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145990612c6e565b60405180910390fd5b61146b816116d7565b50565b5f816114786114cf565b1115801561148657505f5482105b80156114c157505f7c010000000000000000000000000000000000000000000000000000000060045f8581526020019081526020015f205416145b9050919050565b5f33905090565b5f90565b5f80829050806114e16114cf565b1161155f575f5481101561155e575f60045f8381526020019081526020015f205490505f7c010000000000000000000000000000000000000000000000000000000082160361155c575b5f81036115525760045f836001900393508381526020019081526020015f2054905061152b565b8092505050611591565b505b5b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b5f805f60065f8581526020019081526020015f2090508092508254915050915091565b5f73ffffffffffffffffffffffffffffffffffffffff8316925073ffffffffffffffffffffffffffffffffffffffff821691508382148383141790509392505050565b50505050565b5f8060e883901c905060e86116188686846119d3565b62ffffff16901b9150509392505050565b5f73ffffffffffffffffffffffffffffffffffffffff83169250814260a01b178317905092915050565b50505050565b6116616119db565b73ffffffffffffffffffffffffffffffffffffffff1661167f610e9c565b73ffffffffffffffffffffffffffffffffffffffff16146116d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116cc90612cd6565b60405180910390fd5b565b5f60085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160085f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f42905090565b6117ba828260405180602001604052805f8152506119e2565b5050565b5f8373ffffffffffffffffffffffffffffffffffffffff1663150b7a026117e36114c8565b8786866040518563ffffffff1660e01b81526004016118059493929190612d46565b6020604051808303815f875af192505050801561184057506040513d601f19601f8201168201806040525081019061183d9190612da4565b60015b6118b6573d805f811461186e576040519150601f19603f3d011682016040523d82523d5f602084013e611873565b606091505b505f8151036118ae576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050949350505050565b60605f600161191784611a79565b0190505f8167ffffffffffffffff81111561193557611934612176565b5b6040519080825280601f01601f1916602001820160405280156119675781602001600182028036833780820191505090505b5090505f82602001820190505b6001156119c8578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816119bd576119bc612dcf565b5b0494505f8503611974575b819350505050919050565b5f9392505050565b5f33905090565b6119ec8383611bca565b5f8373ffffffffffffffffffffffffffffffffffffffff163b14611a74575f805490505f83820390505b611a285f8683806001019450866117be565b611a5e576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b818110611a1657815f5414611a71575f80fd5b50505b505050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611ad5577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611acb57611aca612dcf565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611b12576d04ee2d6d415b85acef81000000008381611b0857611b07612dcf565b5b0492506020810190505b662386f26fc100008310611b4157662386f26fc100008381611b3757611b36612dcf565b5b0492506010810190505b6305f5e1008310611b6a576305f5e1008381611b6057611b5f612dcf565b5b0492506008810190505b6127108310611b8f576127108381611b8557611b84612dcf565b5b0492506004810190505b60648310611bb25760648381611ba857611ba7612dcf565b5b0492506002810190505b600a8310611bc1576001810190505b80915050919050565b5f805490505f8203611c08576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611c145f8483856115fc565b600160406001901b17820260055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282540192505081905550611c8683611c775f865f611602565b611c8085611d73565b17611629565b60045f8381526020019081526020015f20819055505f80838301905073ffffffffffffffffffffffffffffffffffffffff8516915082825f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef5f80a4600183015b818114611d205780835f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef5f80a4600181019050611ce7565b505f8203611d5a576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805f819055505050611d6e5f848385611653565b505050565b5f6001821460e11b9050919050565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611dc781611d93565b8114611dd1575f80fd5b50565b5f81359050611de281611dbe565b92915050565b5f60208284031215611dfd57611dfc611d8b565b5b5f611e0a84828501611dd4565b91505092915050565b5f8115159050919050565b611e2781611e13565b82525050565b5f602082019050611e405f830184611e1e565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f611e8882611e46565b611e928185611e50565b9350611ea2818560208601611e60565b611eab81611e6e565b840191505092915050565b5f6020820190508181035f830152611ece8184611e7e565b905092915050565b5f819050919050565b611ee881611ed6565b8114611ef2575f80fd5b50565b5f81359050611f0381611edf565b92915050565b5f60208284031215611f1e57611f1d611d8b565b5b5f611f2b84828501611ef5565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611f5d82611f34565b9050919050565b611f6d81611f53565b82525050565b5f602082019050611f865f830184611f64565b92915050565b611f9581611f53565b8114611f9f575f80fd5b50565b5f81359050611fb081611f8c565b92915050565b5f8060408385031215611fcc57611fcb611d8b565b5b5f611fd985828601611fa2565b9250506020611fea85828601611ef5565b9150509250929050565b611ffd81611ed6565b82525050565b5f6020820190506120165f830184611ff4565b92915050565b5f805f6060848603121561203357612032611d8b565b5b5f61204086828701611fa2565b935050602061205186828701611fa2565b925050604061206286828701611ef5565b9150509250925092565b5f6020828403121561208157612080611d8b565b5b5f61208e84828501611fa2565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b6120c981611ed6565b82525050565b5f6120da83836120c0565b60208301905092915050565b5f602082019050919050565b5f6120fc82612097565b61210681856120a1565b9350612111836120b1565b805f5b8381101561214157815161212888826120cf565b9750612133836120e6565b925050600181019050612114565b5085935050505092915050565b5f6020820190508181035f83015261216681846120f2565b905092915050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6121ac82611e6e565b810181811067ffffffffffffffff821117156121cb576121ca612176565b5b80604052505050565b5f6121dd611d82565b90506121e982826121a3565b919050565b5f67ffffffffffffffff82111561220857612207612176565b5b61221182611e6e565b9050602081019050919050565b828183375f83830152505050565b5f61223e612239846121ee565b6121d4565b90508281526020810184848401111561225a57612259612172565b5b61226584828561221e565b509392505050565b5f82601f8301126122815761228061216e565b5b813561229184826020860161222c565b91505092915050565b5f602082840312156122af576122ae611d8b565b5b5f82013567ffffffffffffffff8111156122cc576122cb611d8f565b5b6122d88482850161226d565b91505092915050565b6122ea81611e13565b81146122f4575f80fd5b50565b5f81359050612305816122e1565b92915050565b5f806040838503121561232157612320611d8b565b5b5f61232e85828601611fa2565b925050602061233f858286016122f7565b9150509250929050565b5f67ffffffffffffffff82111561236357612362612176565b5b61236c82611e6e565b9050602081019050919050565b5f61238b61238684612349565b6121d4565b9050828152602081018484840111156123a7576123a6612172565b5b6123b284828561221e565b509392505050565b5f82601f8301126123ce576123cd61216e565b5b81356123de848260208601612379565b91505092915050565b5f805f80608085870312156123ff576123fe611d8b565b5b5f61240c87828801611fa2565b945050602061241d87828801611fa2565b935050604061242e87828801611ef5565b925050606085013567ffffffffffffffff81111561244f5761244e611d8f565b5b61245b878288016123ba565b91505092959194509250565b5f806040838503121561247d5761247c611d8b565b5b5f61248a85828601611fa2565b925050602061249b85828601611fa2565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806124e957607f821691505b6020821081036124fc576124fb6124a5565b5b50919050565b5f81905092915050565b50565b5f61251a5f83612502565b91506125258261250c565b5f82019050919050565b5f6125398261250f565b9150819050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6125a782611ed6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036125d9576125d8612570565b5b600182019050919050565b7f53616c6520686173206e6f7420737461727465642079657400000000000000005f82015250565b5f612618601883611e50565b9150612623826125e4565b602082019050919050565b5f6020820190508181035f8301526126458161260c565b9050919050565b5f61265682611ed6565b915061266183611ed6565b925082820190508082111561267957612678612570565b5b92915050565b7f4d617820737570706c79206578636565646564000000000000000000000000005f82015250565b5f6126b3601383611e50565b91506126be8261267f565b602082019050919050565b5f6020820190508181035f8301526126e0816126a7565b9050919050565b5f6126f182611ed6565b91506126fc83611ed6565b925082820261270a81611ed6565b9150828204841483151761272157612720612570565b5b5092915050565b7f4e6f7420656e6f7567682066756e6473000000000000000000000000000000005f82015250565b5f61275c601083611e50565b915061276782612728565b602082019050919050565b5f6020820190508181035f83015261278981612750565b9050919050565b7f4f6e6c792033204e465473207065722057616c6c6574000000000000000000005f82015250565b5f6127c4601683611e50565b91506127cf82612790565b602082019050919050565b5f6020820190508181035f8301526127f1816127b8565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026128547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612819565b61285e8683612819565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61289961289461288f84611ed6565b612876565b611ed6565b9050919050565b5f819050919050565b6128b28361287f565b6128c66128be826128a0565b848454612825565b825550505050565b5f90565b6128da6128ce565b6128e58184846128a9565b505050565b5b81811015612908576128fd5f826128d2565b6001810190506128eb565b5050565b601f82111561294d5761291e816127f8565b6129278461280a565b81016020851015612936578190505b61294a6129428561280a565b8301826128ea565b50505b505050565b5f82821c905092915050565b5f61296d5f1984600802612952565b1980831691505092915050565b5f612985838361295e565b9150826002028217905092915050565b61299e82611e46565b67ffffffffffffffff8111156129b7576129b6612176565b5b6129c182546124d2565b6129cc82828561290c565b5f60209050601f8311600181146129fd575f84156129eb578287015190505b6129f5858261297a565b865550612a5c565b601f198416612a0b866127f8565b5f5b82811015612a3257848901518255600182019150602085019450602081019050612a0d565b86831015612a4f5784890151612a4b601f89168261295e565b8355505b6001600288020188555050505b505050505050565b7f55524920717565727920666f72206e6f6e6578697374656e7420746f6b656e005f82015250565b5f612a98601f83611e50565b9150612aa382612a64565b602082019050919050565b5f6020820190508181035f830152612ac581612a8c565b9050919050565b5f81905092915050565b5f8154612ae2816124d2565b612aec8186612acc565b9450600182165f8114612b065760018114612b1b57612b4d565b60ff1983168652811515820286019350612b4d565b612b24856127f8565b5f5b83811015612b4557815481890152600182019150602081019050612b26565b838801955050505b50505092915050565b5f612b6082611e46565b612b6a8185612acc565b9350612b7a818560208601611e60565b80840191505092915050565b7f2e6a736f6e0000000000000000000000000000000000000000000000000000005f82015250565b5f612bba600583612acc565b9150612bc582612b86565b600582019050919050565b5f612bdb8285612ad6565b9150612be78284612b56565b9150612bf282612bae565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f612c58602683611e50565b9150612c6382612bfe565b604082019050919050565b5f6020820190508181035f830152612c8581612c4c565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f612cc0602083611e50565b9150612ccb82612c8c565b602082019050919050565b5f6020820190508181035f830152612ced81612cb4565b9050919050565b5f81519050919050565b5f82825260208201905092915050565b5f612d1882612cf4565b612d228185612cfe565b9350612d32818560208601611e60565b612d3b81611e6e565b840191505092915050565b5f608082019050612d595f830187611f64565b612d666020830186611f64565b612d736040830185611ff4565b8181036060830152612d858184612d0e565b905095945050505050565b5f81519050612d9e81611dbe565b92915050565b5f60208284031215612db957612db8611d8b565b5b5f612dc684828501612d90565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffdfea264697066735822122053a97973e89dd0275c47e9a57a878cfa8917a60e0b334621058e775d39bc963e64736f6c634300081a0033",
  "deployedBytecode": "0x608060405260043610610165575f3560e01c80636c0360eb116100d0578063a0bcfc7f11610089578063c87b56dd11610063578063c87b56dd146104b5578063df3a4586146104f1578063e985e9c51461052d578063f2fde38b1461056957610165565b8063a0bcfc7f14610449578063a22cb46514610471578063b88d4fde1461049957610165565b80636c0360eb1461035d57806370a0823114610387578063715018a6146103c35780638da5cb5b146103d957806395d89b4114610403578063a0712d681461042d57610165565b806323b872dd1161012257806323b872dd1461027b5780633ccfd60b1461029757806342842e0e146102a1578063438b6300146102bd578063525f8a5c146102f95780636352211e1461032157610165565b806301ffc9a71461016957806306fdde03146101a5578063081812fc146101cf578063095ea7b31461020b57806318160ddd146102275780631cbaee2d14610251575b5f80fd5b348015610174575f80fd5b5061018f600480360381019061018a9190611de8565b610591565b60405161019c9190611e2d565b60405180910390f35b3480156101b0575f80fd5b506101b9610622565b6040516101c69190611eb6565b60405180910390f35b3480156101da575f80fd5b506101f560048036038101906101f09190611f09565b6106b2565b6040516102029190611f73565b60405180910390f35b61022560048036038101906102209190611fb6565b61072c565b005b348015610232575f80fd5b5061023b61086b565b6040516102489190612003565b60405180910390f35b34801561025c575f80fd5b50610265610880565b6040516102729190612003565b60405180910390f35b6102956004803603810190610290919061201c565b610886565b005b61029f610b94565b005b6102bb60048036038101906102b6919061201c565b610c17565b005b3480156102c8575f80fd5b506102e360048036038101906102de919061206c565b610c36565b6040516102f0919061214e565b60405180910390f35b348015610304575f80fd5b5061031f600480360381019061031a9190611f09565b610d25565b005b34801561032c575f80fd5b5061034760048036038101906103429190611f09565b610d37565b6040516103549190611f73565b60405180910390f35b348015610368575f80fd5b50610371610d48565b60405161037e9190611eb6565b60405180910390f35b348015610392575f80fd5b506103ad60048036038101906103a8919061206c565b610dd4565b6040516103ba9190612003565b60405180910390f35b3480156103ce575f80fd5b506103d7610e89565b005b3480156103e4575f80fd5b506103ed610e9c565b6040516103fa9190611f73565b60405180910390f35b34801561040e575f80fd5b50610417610ec4565b6040516104249190611eb6565b60405180910390f35b61044760048036038101906104429190611f09565b610f54565b005b348015610454575f80fd5b5061046f600480360381019061046a919061229a565b61113a565b005b34801561047c575f80fd5b506104976004803603810190610492919061230b565b611155565b005b6104b360048036038101906104ae91906123e7565b61125b565b005b3480156104c0575f80fd5b506104db60048036038101906104d69190611f09565b6112cd565b6040516104e89190611eb6565b60405180910390f35b3480156104fc575f80fd5b506105176004803603810190610512919061206c565b611349565b6040516105249190612003565b60405180910390f35b348015610538575f80fd5b50610553600480360381019061054e9190612467565b61135e565b6040516105609190611e2d565b60405180910390f35b348015610574575f80fd5b5061058f600480360381019061058a919061206c565b6113ec565b005b5f6301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105eb57506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061061b5750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b606060028054610631906124d2565b80601f016020809104026020016040519081016040528092919081815260200182805461065d906124d2565b80156106a85780601f1061067f576101008083540402835291602001916106a8565b820191905f5260205f20905b81548152906001019060200180831161068b57829003601f168201915b5050505050905090565b5f6106bc8261146e565b6106f2576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60065f8381526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f61073682610d37565b90508073ffffffffffffffffffffffffffffffffffffffff166107576114c8565b73ffffffffffffffffffffffffffffffffffffffff16146107ba576107838161077e6114c8565b61135e565b6107b9576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b8260065f8481526020019081526020015f205f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b5f6108746114cf565b6001545f540303905090565b60095481565b5f610890826114d3565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108f7576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8061090284611596565b9150915061091881876109136114c8565b6115b9565b6109645761092d866109286114c8565b61135e565b610963576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b5f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036109c9576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109d686868660016115fc565b80156109e0575f82555b60055f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8154600190039190508190555060055f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f815460010191905081905550610aa885610a84888887611602565b7c020000000000000000000000000000000000000000000000000000000017611629565b60045f8681526020019081526020015f20819055505f7c0200000000000000000000000000000000000000000000000000000000841603610b24575f6001850190505f60045f8381526020019081526020015f205403610b22575f548114610b21578360045f8381526020019081526020015f20819055505b5b505b838573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610b8c8686866001611653565b505050505050565b610b9c611659565b5f610ba5610e9c565b73ffffffffffffffffffffffffffffffffffffffff1647604051610bc89061252f565b5f6040518083038185875af1925050503d805f8114610c02576040519150601f19603f3d011682016040523d82523d5f602084013e610c07565b606091505b5050905080610c14575f80fd5b50565b610c3183838360405180602001604052805f81525061125b565b505050565b60605f610c4283610dd4565b90505f8167ffffffffffffffff811115610c5f57610c5e612176565b5b604051908082528060200260200182016040528015610c8d5781602001602082028036833780820191505090505b5090505f805b610c9b61086b565b811015610d19578573ffffffffffffffffffffffffffffffffffffffff16610cc282610d37565b73ffffffffffffffffffffffffffffffffffffffff1603610d0c5780838381518110610cf157610cf0612543565b5b6020026020010181815250508180610d089061259d565b9250505b8080600101915050610c93565b50819350505050919050565b610d2d611659565b8060098190555050565b5f610d41826114d3565b9050919050565b600a8054610d55906124d2565b80601f0160208091040260200160405190810160405280929190818152602001828054610d81906124d2565b8015610dcc5780601f10610da357610100808354040283529160200191610dcc565b820191905f5260205f20905b815481529060010190602001808311610daf57829003601f168201915b505050505081565b5f8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e3a576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff60055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054169050919050565b610e91611659565b610e9a5f6116d7565b565b5f60085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060038054610ed3906124d2565b80601f0160208091040260200160405190810160405280929190818152602001828054610eff906124d2565b8015610f4a5780601f10610f2157610100808354040283529160200191610f4a565b820191905f5260205f20905b815481529060010190602001808311610f2d57829003601f168201915b5050505050905090565b600954610f5f61179a565b1015610fa0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f979061262e565b60405180910390fd5b6101f381610fac61086b565b610fb6919061264c565b1115610ff7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fee906126c9565b60405180910390fd5b806802b5e3af16b188000061100c91906126e7565b34101561104e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104590612772565b60405180910390fd5b600381600b5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054611099919061264c565b11156110da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d1906127da565b60405180910390fd5b80600b5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254611126919061264c565b9250508190555061113733826117a1565b50565b611142611659565b80600a90816111519190612995565b5050565b8060075f6111616114c8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff1661120a6114c8565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161124f9190611e2d565b60405180910390a35050565b611266848484610886565b5f8373ffffffffffffffffffffffffffffffffffffffff163b146112c757611290848484846117be565b6112c6576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b50505050565b60606112d88261146e565b611317576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130e90612aae565b60405180910390fd5b600a61132283611909565b604051602001611333929190612bd0565b6040516020818303038152906040529050919050565b600b602052805f5260405f205f915090505481565b5f60075f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b6113f4611659565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611462576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145990612c6e565b60405180910390fd5b61146b816116d7565b50565b5f816114786114cf565b1115801561148657505f5482105b80156114c157505f7c010000000000000000000000000000000000000000000000000000000060045f8581526020019081526020015f205416145b9050919050565b5f33905090565b5f90565b5f80829050806114e16114cf565b1161155f575f5481101561155e575f60045f8381526020019081526020015f205490505f7c010000000000000000000000000000000000000000000000000000000082160361155c575b5f81036115525760045f836001900393508381526020019081526020015f2054905061152b565b8092505050611591565b505b5b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b5f805f60065f8581526020019081526020015f2090508092508254915050915091565b5f73ffffffffffffffffffffffffffffffffffffffff8316925073ffffffffffffffffffffffffffffffffffffffff821691508382148383141790509392505050565b50505050565b5f8060e883901c905060e86116188686846119d3565b62ffffff16901b9150509392505050565b5f73ffffffffffffffffffffffffffffffffffffffff83169250814260a01b178317905092915050565b50505050565b6116616119db565b73ffffffffffffffffffffffffffffffffffffffff1661167f610e9c565b73ffffffffffffffffffffffffffffffffffffffff16146116d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116cc90612cd6565b60405180910390fd5b565b5f60085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160085f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f42905090565b6117ba828260405180602001604052805f8152506119e2565b5050565b5f8373ffffffffffffffffffffffffffffffffffffffff1663150b7a026117e36114c8565b8786866040518563ffffffff1660e01b81526004016118059493929190612d46565b6020604051808303815f875af192505050801561184057506040513d601f19601f8201168201806040525081019061183d9190612da4565b60015b6118b6573d805f811461186e576040519150601f19603f3d011682016040523d82523d5f602084013e611873565b606091505b505f8151036118ae576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050949350505050565b60605f600161191784611a79565b0190505f8167ffffffffffffffff81111561193557611934612176565b5b6040519080825280601f01601f1916602001820160405280156119675781602001600182028036833780820191505090505b5090505f82602001820190505b6001156119c8578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816119bd576119bc612dcf565b5b0494505f8503611974575b819350505050919050565b5f9392505050565b5f33905090565b6119ec8383611bca565b5f8373ffffffffffffffffffffffffffffffffffffffff163b14611a74575f805490505f83820390505b611a285f8683806001019450866117be565b611a5e576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b818110611a1657815f5414611a71575f80fd5b50505b505050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611ad5577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611acb57611aca612dcf565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611b12576d04ee2d6d415b85acef81000000008381611b0857611b07612dcf565b5b0492506020810190505b662386f26fc100008310611b4157662386f26fc100008381611b3757611b36612dcf565b5b0492506010810190505b6305f5e1008310611b6a576305f5e1008381611b6057611b5f612dcf565b5b0492506008810190505b6127108310611b8f576127108381611b8557611b84612dcf565b5b0492506004810190505b60648310611bb25760648381611ba857611ba7612dcf565b5b0492506002810190505b600a8310611bc1576001810190505b80915050919050565b5f805490505f8203611c08576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611c145f8483856115fc565b600160406001901b17820260055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282540192505081905550611c8683611c775f865f611602565b611c8085611d73565b17611629565b60045f8381526020019081526020015f20819055505f80838301905073ffffffffffffffffffffffffffffffffffffffff8516915082825f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef5f80a4600183015b818114611d205780835f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef5f80a4600181019050611ce7565b505f8203611d5a576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805f819055505050611d6e5f848385611653565b505050565b5f6001821460e11b9050919050565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611dc781611d93565b8114611dd1575f80fd5b50565b5f81359050611de281611dbe565b92915050565b5f60208284031215611dfd57611dfc611d8b565b5b5f611e0a84828501611dd4565b91505092915050565b5f8115159050919050565b611e2781611e13565b82525050565b5f602082019050611e405f830184611e1e565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f611e8882611e46565b611e928185611e50565b9350611ea2818560208601611e60565b611eab81611e6e565b840191505092915050565b5f6020820190508181035f830152611ece8184611e7e565b905092915050565b5f819050919050565b611ee881611ed6565b8114611ef2575f80fd5b50565b5f81359050611f0381611edf565b92915050565b5f60208284031215611f1e57611f1d611d8b565b5b5f611f2b84828501611ef5565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611f5d82611f34565b9050919050565b611f6d81611f53565b82525050565b5f602082019050611f865f830184611f64565b92915050565b611f9581611f53565b8114611f9f575f80fd5b50565b5f81359050611fb081611f8c565b92915050565b5f8060408385031215611fcc57611fcb611d8b565b5b5f611fd985828601611fa2565b9250506020611fea85828601611ef5565b9150509250929050565b611ffd81611ed6565b82525050565b5f6020820190506120165f830184611ff4565b92915050565b5f805f6060848603121561203357612032611d8b565b5b5f61204086828701611fa2565b935050602061205186828701611fa2565b925050604061206286828701611ef5565b9150509250925092565b5f6020828403121561208157612080611d8b565b5b5f61208e84828501611fa2565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b6120c981611ed6565b82525050565b5f6120da83836120c0565b60208301905092915050565b5f602082019050919050565b5f6120fc82612097565b61210681856120a1565b9350612111836120b1565b805f5b8381101561214157815161212888826120cf565b9750612133836120e6565b925050600181019050612114565b5085935050505092915050565b5f6020820190508181035f83015261216681846120f2565b905092915050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6121ac82611e6e565b810181811067ffffffffffffffff821117156121cb576121ca612176565b5b80604052505050565b5f6121dd611d82565b90506121e982826121a3565b919050565b5f67ffffffffffffffff82111561220857612207612176565b5b61221182611e6e565b9050602081019050919050565b828183375f83830152505050565b5f61223e612239846121ee565b6121d4565b90508281526020810184848401111561225a57612259612172565b5b61226584828561221e565b509392505050565b5f82601f8301126122815761228061216e565b5b813561229184826020860161222c565b91505092915050565b5f602082840312156122af576122ae611d8b565b5b5f82013567ffffffffffffffff8111156122cc576122cb611d8f565b5b6122d88482850161226d565b91505092915050565b6122ea81611e13565b81146122f4575f80fd5b50565b5f81359050612305816122e1565b92915050565b5f806040838503121561232157612320611d8b565b5b5f61232e85828601611fa2565b925050602061233f858286016122f7565b9150509250929050565b5f67ffffffffffffffff82111561236357612362612176565b5b61236c82611e6e565b9050602081019050919050565b5f61238b61238684612349565b6121d4565b9050828152602081018484840111156123a7576123a6612172565b5b6123b284828561221e565b509392505050565b5f82601f8301126123ce576123cd61216e565b5b81356123de848260208601612379565b91505092915050565b5f805f80608085870312156123ff576123fe611d8b565b5b5f61240c87828801611fa2565b945050602061241d87828801611fa2565b935050604061242e87828801611ef5565b925050606085013567ffffffffffffffff81111561244f5761244e611d8f565b5b61245b878288016123ba565b91505092959194509250565b5f806040838503121561247d5761247c611d8b565b5b5f61248a85828601611fa2565b925050602061249b85828601611fa2565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806124e957607f821691505b6020821081036124fc576124fb6124a5565b5b50919050565b5f81905092915050565b50565b5f61251a5f83612502565b91506125258261250c565b5f82019050919050565b5f6125398261250f565b9150819050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6125a782611ed6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036125d9576125d8612570565b5b600182019050919050565b7f53616c6520686173206e6f7420737461727465642079657400000000000000005f82015250565b5f612618601883611e50565b9150612623826125e4565b602082019050919050565b5f6020820190508181035f8301526126458161260c565b9050919050565b5f61265682611ed6565b915061266183611ed6565b925082820190508082111561267957612678612570565b5b92915050565b7f4d617820737570706c79206578636565646564000000000000000000000000005f82015250565b5f6126b3601383611e50565b91506126be8261267f565b602082019050919050565b5f6020820190508181035f8301526126e0816126a7565b9050919050565b5f6126f182611ed6565b91506126fc83611ed6565b925082820261270a81611ed6565b9150828204841483151761272157612720612570565b5b5092915050565b7f4e6f7420656e6f7567682066756e6473000000000000000000000000000000005f82015250565b5f61275c601083611e50565b915061276782612728565b602082019050919050565b5f6020820190508181035f83015261278981612750565b9050919050565b7f4f6e6c792033204e465473207065722057616c6c6574000000000000000000005f82015250565b5f6127c4601683611e50565b91506127cf82612790565b602082019050919050565b5f6020820190508181035f8301526127f1816127b8565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026128547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612819565b61285e8683612819565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61289961289461288f84611ed6565b612876565b611ed6565b9050919050565b5f819050919050565b6128b28361287f565b6128c66128be826128a0565b848454612825565b825550505050565b5f90565b6128da6128ce565b6128e58184846128a9565b505050565b5b81811015612908576128fd5f826128d2565b6001810190506128eb565b5050565b601f82111561294d5761291e816127f8565b6129278461280a565b81016020851015612936578190505b61294a6129428561280a565b8301826128ea565b50505b505050565b5f82821c905092915050565b5f61296d5f1984600802612952565b1980831691505092915050565b5f612985838361295e565b9150826002028217905092915050565b61299e82611e46565b67ffffffffffffffff8111156129b7576129b6612176565b5b6129c182546124d2565b6129cc82828561290c565b5f60209050601f8311600181146129fd575f84156129eb578287015190505b6129f5858261297a565b865550612a5c565b601f198416612a0b866127f8565b5f5b82811015612a3257848901518255600182019150602085019450602081019050612a0d565b86831015612a4f5784890151612a4b601f89168261295e565b8355505b6001600288020188555050505b505050505050565b7f55524920717565727920666f72206e6f6e6578697374656e7420746f6b656e005f82015250565b5f612a98601f83611e50565b9150612aa382612a64565b602082019050919050565b5f6020820190508181035f830152612ac581612a8c565b9050919050565b5f81905092915050565b5f8154612ae2816124d2565b612aec8186612acc565b9450600182165f8114612b065760018114612b1b57612b4d565b60ff1983168652811515820286019350612b4d565b612b24856127f8565b5f5b83811015612b4557815481890152600182019150602081019050612b26565b838801955050505b50505092915050565b5f612b6082611e46565b612b6a8185612acc565b9350612b7a818560208601611e60565b80840191505092915050565b7f2e6a736f6e0000000000000000000000000000000000000000000000000000005f82015250565b5f612bba600583612acc565b9150612bc582612b86565b600582019050919050565b5f612bdb8285612ad6565b9150612be78284612b56565b9150612bf282612bae565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f612c58602683611e50565b9150612c6382612bfe565b604082019050919050565b5f6020820190508181035f830152612c8581612c4c565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f612cc0602083611e50565b9150612ccb82612c8c565b602082019050919050565b5f6020820190508181035f830152612ced81612cb4565b9050919050565b5f81519050919050565b5f82825260208201905092915050565b5f612d1882612cf4565b612d228185612cfe565b9350612d32818560208601611e60565b612d3b81611e6e565b840191505092915050565b5f608082019050612d595f830187611f64565b612d666020830186611f64565b612d736040830185611ff4565b8181036060830152612d858184612d0e565b905095945050505050565b5f81519050612d9e81611dbe565b92915050565b5f60208284031215612db957612db8611d8b565b5b5f612dc684828501612d90565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffdfea264697066735822122053a97973e89dd0275c47e9a57a878cfa8917a60e0b334621058e775d39bc963e64736f6c634300081a0033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "ConsecutiveTransfer(uint256,uint256,address,address)": {
        "details": "Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`, as defined in the [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard. See {_mintERC2309} for more details."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in `owner`'s account."
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}."
      },
      "mint(uint256)": {
        "params": {
          "_quantity": "Amount of NFTs the user wants to mint*"
        }
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Equivalent to `safeTransferFrom(from, to, tokenId, '')`."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "setBaseUri(string)": {
        "params": {
          "_baseURI": "The new base URI of the NFTs*"
        }
      },
      "setSaleStartTime(uint256)": {
        "params": {
          "_saleStartTime": "The new saleStartTime*"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokenURI(uint256)": {
        "params": {
          "_tokenId": "The ID of the NFT you want to have the URI*"
        }
      },
      "totalSupply()": {
        "details": "Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "walletOfOwner(address)": {
        "params": {
          "_owner": "The address to query"
        },
        "returns": {
          "_0": "An array with the token IDs owned by the address*"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ApprovalCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "ApprovalQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "BalanceQueryForZeroAddress()": [
        {
          "notice": "Cannot query the balance for the zero address."
        }
      ],
      "MintERC2309QuantityExceedsLimit()": [
        {
          "notice": "The `quantity` minted with ERC2309 exceeds the safety limit."
        }
      ],
      "MintToZeroAddress()": [
        {
          "notice": "Cannot mint to the zero address."
        }
      ],
      "MintZeroQuantity()": [
        {
          "notice": "The quantity of tokens minted must be more than zero."
        }
      ],
      "OwnerQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "OwnershipNotInitializedForExtraData()": [
        {
          "notice": "The `extraData` cannot be set on an unintialized ownership slot."
        }
      ],
      "TransferCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "TransferFromIncorrectOwner()": [
        {
          "notice": "The token must be owned by `from`."
        }
      ],
      "TransferToNonERC721ReceiverImplementer()": [
        {
          "notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
        }
      ],
      "TransferToZeroAddress()": [
        {
          "notice": "Cannot transfer to the zero address."
        }
      ],
      "URIQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "mint(uint256)": {
        "notice": "Mint function"
      },
      "setBaseUri(string)": {
        "notice": "Change the base URI of the NFTs"
      },
      "setSaleStartTime(uint256)": {
        "notice": "Change the saleStartTime"
      },
      "tokenURI(uint256)": {
        "notice": "Get the token URI of an NFT by its ID"
      },
      "walletOfOwner(address)": {
        "notice": "Get all token IDs owned by a specific address"
      },
      "withdraw()": {
        "notice": "Get paid :D !*"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1533,
        "contract": "contracts/NFTIsERC721A.sol:NFT",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1535,
        "contract": "contracts/NFTIsERC721A.sol:NFT",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1537,
        "contract": "contracts/NFTIsERC721A.sol:NFT",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1539,
        "contract": "contracts/NFTIsERC721A.sol:NFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 1543,
        "contract": "contracts/NFTIsERC721A.sol:NFT",
        "label": "_packedOwnerships",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1547,
        "contract": "contracts/NFTIsERC721A.sol:NFT",
        "label": "_packedAddressData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1552,
        "contract": "contracts/NFTIsERC721A.sol:NFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)1465_storage)"
      },
      {
        "astId": 1558,
        "contract": "contracts/NFTIsERC721A.sol:NFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/NFTIsERC721A.sol:NFT",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 1195,
        "contract": "contracts/NFTIsERC721A.sol:NFT",
        "label": "saleStartTime",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1197,
        "contract": "contracts/NFTIsERC721A.sol:NFT",
        "label": "baseURI",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 1204,
        "contract": "contracts/NFTIsERC721A.sol:NFT",
        "label": "amountNFTsPerWallet",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(TokenApprovalRef)1465_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenApprovalRef)1465_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(TokenApprovalRef)1465_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenApprovalRef",
        "members": [
          {
            "astId": 1464,
            "contract": "contracts/NFTIsERC721A.sol:NFT",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}